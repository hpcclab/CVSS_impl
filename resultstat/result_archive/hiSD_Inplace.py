import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import math
def getMeanAndCI(ontimes,i):
    n, min_max, mean, var, skew, kurt = stats.describe(ontimes)
    std=math.sqrt(var)
    R = stats.norm.interval(0.95,loc=mean,scale=std/math.sqrt(i)) #definition's way
    #R = stats.norm.interval(0.05,loc=mean,scale=std) #dr.Amini's dropbox file way
    diff=mean-R[0]
    print("mean="+str(mean))
    return mean,diff
    #ci=diff/int(i)*100 #dr.Amini's dropbox file way
    #return ci #dr.Amini's dropbox file way

def insMeanAndCI(mean,CI,raw,count,l):
    cin=getMeanAndCI(raw[l],count)
    mean.append(cin[0])
    CI.append(cin[1])

#function specific to each graph, if it need some normalize    
def normalizeSubstract(oldlist,baseline):
    newlist=[]
    sequence=0
    for i in range(len(baseline)):
        newlist.append([])
        print(len(baseline[i]))
        for j in range(len(baseline[i])):
            newlist[i].append( (baseline[i][j]-oldlist[i][j])*100.0 /baseline[i][j] )
            #print("newSeq")
    return newlist

##########start data section
#dump raw data here, so we can calculate both average and confidence interval


#Head=[1.0, 1.4, 1.7, 1.9, 2.0, 2.1, 2.3, 2.6, 3.0, 3.5, 4.0]

#Conservative
Cons_raw=[[400,333,433,571,377,77,420,349,288,384,331,91,397,658,174,656,306,586,304,174,816,712,398,349,261,332,117,293,367,453],[862,488,485,635,599,98,762,302,364,561,538,139,505,943,177,620,510,426,417,666,952,797,397,682,350,525,257,379,433,677],[738,497,571,842,1021,866,815,454,574,595,619,377,1019,916,332,828,712,691,467,996,992,996,987,722,706,909,1007,457,683,748],[1041,505,1101,1133,1031,946,1057,719,764,791,1126,388,704,1169,802,908,1097,833,545,1044,1150,1138,1146,932,771,1124,1112,709,991,841],[1191,731,1207,1257,1241,1142,1192,1186,910,917,1217,942,1180,1246,1047,945,1089,811,682,1172,1246,1237,1194,1033,856,1216,1205,1204,1229,1097],[1315,660,1264,1338,1356,1306,1307,1299,1179,1036,1320,1248,1112,1365,995,1066,1122,1059,1087,1279,1360,1334,1307,1127,1274,1343,1301,1276,1281,1205],[1354,1077,1408,1432,1473,1361,1410,1400,1438,1184,1433,1404,1261,1484,1365,1240,1334,1380,1299,1395,1493,1415,1440,1233,1419,1448,1411,1451,1412,1326],[1509,1385,1543,1567,1563,1544,1528,1500,1453,1294,1509,1514,1441,1595,1412,1331,1563,1511,1392,1487,1605,1518,1576,1432,1523,1548,1569,1545,1512,1471],[1632,1678,1630,1655,1692,1609,1680,1659,1536,1407,1652,1573,1609,1649,1600,1590,1642,1628,1582,1591,1667,1656,1670,1429,1639,1672,1650,1634,1644,1606],[1735,1813,1673,1732,1766,1698,1773,1779,1817,1616,1779,1727,1760,1737,1745,1731,1757,1737,1682,1674,1758,1759,1744,1640,1744,1717,1734,1765,1730,1726],[1783,1850,1825,1875,1863,1795,1838,1806,1865,1694,1874,1809,1864,1833,1812,1820,1854,1832,1798,1711,1863,1810,1868,1740,1806,1858,1832,1919,1814,1846]]

#Aggressive
Agg_raw=[[509,310,374,544,538,82,759,226,372,187,463,121,525,699,284,575,220,413,175,266,809,756,321,446,190,525,135,320,377,463],[549,386,405,685,742,94,670,218,314,655,521,191,530,835,185,609,544,492,284,807,978,829,511,724,555,484,333,381,677,540],[914,414,971,825,1049,899,753,318,384,667,786,329,718,1015,378,893,575,619,496,992,976,1007,1025,834,700,755,993,678,836,665],[1057,581,1103,933,986,919,1089,765,644,771,1000,642,1063,1169,373,893,874,889,377,1039,1125,1140,1066,920,905,1080,1157,741,1075,869],[1145,591,1188,1252,1234,1112,1166,915,1127,941,1230,1079,1160,1244,968,984,1135,849,722,1204,1246,1243,1225,995,930,1166,1171,1049,1227,1032],[1268,841,1243,1336,1347,1265,1286,1279,1161,1057,1321,1259,819,1328,1051,1010,1160,1006,1116,1216,1359,1312,1300,1097,1297,1341,1323,1336,1291,1166],[1369,1011,1417,1413,1472,1359,1434,1360,1421,1153,1429,1401,1227,1460,1080,1267,1358,1378,1255,1377,1466,1411,1416,1277,1404,1435,1399,1444,1412,1317],[1524,1450,1545,1543,1558,1534,1535,1468,1425,1268,1525,1494,1492,1546,1463,1295,1479,1476,1427,1475,1593,1531,1540,1349,1507,1531,1539,1559,1512,1464],[1590,1672,1626,1629,1668,1609,1678,1641,1649,1430,1623,1581,1555,1647,1560,1596,1655,1643,1562,1565,1658,1660,1644,1472,1648,1642,1649,1635,1656,1636],[1696,1792,1634,1714,1751,1689,1744,1749,1778,1596,1761,1708,1741,1736,1730,1725,1764,1713,1709,1667,1762,1732,1753,1642,1742,1724,1733,1785,1715,1731],[1796,1843,1821,1842,1840,1798,1840,1709,1864,1670,1843,1779,1792,1815,1788,1797,1862,1858,1772,1687,1843,1793,1868,1681,1746,1836,1827,1873,1816,1851]]

#Adaptive
Adapt_raw=[[503,360,232,532,497,99,589,289,315,349,438,79,485,714,145,643,235,507,252,152,807,732,318,322,130,498,113,357,524,452],[470,402,688,659,829,138,841,295,401,603,385,125,481,907,203,609,456,442,288,973,955,849,511,756,547,561,241,419,689,754],[704,470,946,839,1036,289,825,343,429,696,761,436,710,1067,337,844,527,701,497,978,1071,1007,734,883,737,929,951,350,996,602],[1024,489,1022,896,998,997,1124,502,729,760,997,569,764,1169,648,919,913,785,554,1027,1161,1137,1135,923,1021,1149,1079,633,1090,822],[1204,622,1221,1255,1245,1122,1193,1085,1006,889,1200,1150,1062,1246,869,990,1218,856,669,1119,1235,1232,1207,1047,1057,1218,1195,718,1246,966],[1310,919,1252,1330,1337,1300,1296,1209,1144,889,1311,1253,904,1332,1061,1045,1210,961,1143,1226,1361,1319,1307,1110,1260,1343,1339,1319,1256,1225],[1425,1113,1405,1444,1460,1343,1423,1361,1429,1268,1419,1371,1371,1458,1246,1210,1380,1301,1171,1402,1493,1419,1426,1177,1390,1447,1435,1438,1349,1283],[1512,1525,1523,1569,1577,1537,1507,1501,1433,1298,1538,1509,1274,1558,1232,1302,1559,1478,1429,1460,1584,1525,1552,1381,1543,1520,1566,1559,1520,1484],[1631,1667,1603,1659,1700,1647,1649,1640,1655,1537,1623,1581,1608,1653,1596,1601,1667,1627,1559,1584,1668,1647,1644,1486,1640,1650,1658,1640,1651,1658],[1706,1813,1697,1730,1776,1715,1765,1756,1592,1631,1734,1723,1548,1748,1735,1707,1766,1753,1709,1693,1769,1751,1743,1617,1756,1749,1737,1769,1732,1705],[1792,1858,1830,1873,1845,1785,1871,1839,1877,1606,1862,1804,1860,1834,1814,1812,1844,1809,1703,1720,1877,1793,1884,1712,1793,1845,1834,1916,1841,1855]]

#Nomerge
Nomerge_raw=[[639,411,290,574,557,178,517,206,286,263,537,390,543,771,163,668,213,447,224,297,911,824,430,521,426,476,144,288,356,510],[757,438,461,751,959,294,907,225,352,585,351,150,577,820,506,850,538,502,475,636,1037,983,360,802,599,555,199,487,687,729],[1000,564,895,883,1095,920,808,503,435,784,797,594,941,1141,471,895,650,756,520,653,1126,1089,796,923,561,948,975,460,1040,697],[1161,912,1180,1075,1222,1136,1186,821,999,859,1199,579,1094,1237,1106,997,1122,1119,691,1078,1217,1235,1176,1036,759,1206,1136,1097,1150,892],[1269,795,1286,1336,1317,1214,1298,1276,1072,1212,1307,1116,878,1326,1229,1031,1242,910,729,1251,1330,1329,1303,1098,958,1297,1248,1252,1323,1165],[1380,1082,1387,1423,1428,1397,1390,1339,1259,1062,1410,1366,1337,1435,1276,1226,1288,1052,1280,1372,1443,1430,1417,1191,1337,1444,1397,1433,1398,1245],[1510,1310,1519,1531,1550,1461,1520,1494,1498,1300,1532,1432,1351,1568,1269,1194,1419,1468,1471,1465,1548,1535,1516,1354,1511,1544,1485,1525,1492,1441],[1621,1623,1624,1630,1664,1609,1629,1568,1607,1473,1634,1516,1548,1658,1398,1350,1651,1587,1392,1628,1675,1634,1658,1508,1608,1642,1646,1652,1630,1544],[1720,1778,1720,1733,1778,1730,1764,1710,1724,1637,1746,1690,1667,1753,1720,1698,1736,1714,1728,1637,1767,1767,1735,1664,1675,1763,1752,1725,1750,1691],[1825,1892,1811,1833,1869,1780,1854,1867,1892,1659,1860,1831,1848,1851,1836,1832,1867,1820,1856,1770,1878,1868,1861,1718,1796,1853,1823,1865,1830,1825],[1908,1989,1907,1980,1975,1916,1958,1958,1962,1755,1954,1894,1983,1959,1933,1930,1950,1918,1933,1861,1977,1939,1972,1819,1921,1966,1939,1990,1935,1922]]









#create array for mean, and confidence interval
Cons=[]
Agg=[]
Adapt=[]
#
Cons_ci=[]
Agg_ci=[]
Adapt_ci=[]
#calculate CI and mean
column=len(Cons_raw)

######## normalize the data
Cons_raw=normalizeSubstract(Cons_raw,Nomerge_raw)
Agg_raw=normalizeSubstract(Agg_raw,Nomerge_raw)
Adapt_raw=normalizeSubstract(Adapt_raw,Nomerge_raw)

#find mean and stdErr
for l in range(column):
    #format: mean array, CI array, raw data, how many trials in the raw data
    #don't forget to change number 30 to number of trials you actually test
    insMeanAndCI(Cons,Cons_ci,Cons_raw,30,l)
    insMeanAndCI(Agg,Agg_ci,Agg_raw,30,l)
    insMeanAndCI(Adapt,Adapt_ci,Adapt_raw,30,l)
    #insMeanAndCI(Nomerge,Nomerge_ci,Nomerge_raw,30,l)
###########################################
# initiation
fig, ax = plt.subplots()
axes = plt.gca()
############
#your main input parameters section
n_groups =3 # number of different data to plot, can change here without removing data
xlabel='Oversubscription Level (#Tasks)'
ylabel='DMR'
n_point = column # number of x ticks to use, must match number of xtick and number of data point
xtick=('1k','1.1k','1.2k','1.3k','1.4k','1.5k','1.6k','1.7k','1.8k','1.9k','2k')
labels=['Conservative',"Adaptive",'Aggressive']
legendcolumn= 2 #number of column in the legend
data=[Cons,Adapt,Agg]
yerrdata=[Cons_ci,Adapt_ci,Agg_ci]
axes.set_ylim([0,60]) #y axis scale
ticklabelsize=18
axislabelfontsize=16

############
#auto calculated values and some rarely change config, can also overwrite
axes.set_xlim([-0.5, len(xtick)-0.5]) #y axis
font = {'family' : 'DejaVu Sans',
        #'weight' : 'bold',
        'size'   : 16 }
bar_width =1.0/(n_groups+2) 
edgecols=['royalblue','forestgreen','red','mediumblue','orange','pink','limegreen','lightblue','darkgreen'] #prepared 9 colors
#hatch_arr=[".","x"]
hatch_arr=["////","ooo",".\\\\\\","----","**","xxx","+++",".///","////////"] #prepared 9 hatch style
opacity = 1 #chart opacity
offsetindex=(n_groups-1)/2.0


############
#plot section
plt.rc('font', **font)
index = np.arange(n_point)
print("data"+str(data))
print("yerrdata"+str(yerrdata))
for i in range(0,n_groups):
    #draw internal hatch, and labels
    plt.bar(index - (offsetindex-i)*bar_width, data[i], bar_width,
                     alpha=opacity,                 
                     hatch=hatch_arr[i],
                    #color=edgecols[i],
                	 color='white',
		     edgecolor=edgecols[i],
             label=labels[i],
		     lw=1.0,
		     zorder = 0)
    #draw black liner and error bar
    plt.bar(index - (offsetindex-i)*bar_width, data[i], bar_width, yerr =
		    yerrdata[i],                              
                    color='none',
		    error_kw=dict(ecolor='black',capsize=3),
                    edgecolor='k',
		    zorder = 1,
		    lw=1.0)

plt.tick_params(axis='both', which='major', labelsize=ticklabelsize)
plt.tick_params(axis='both', which='minor', labelsize=ticklabelsize)
plt.xlabel(xlabel,fontsize=axislabelfontsize)
plt.ylabel(ylabel,fontsize=axislabelfontsize)
#plt.title('Execution time (deadline sorted batch queue)') #generally, we add title in latex
ax.set_xticks(index)
ax.set_xticklabels(xtick)
ax.legend(loc='upper center', prop={'size': 10},bbox_to_anchor=(0.5, 1.00), shadow= True, ncol=legendcolumn)

plt.tight_layout()
plt.show()


