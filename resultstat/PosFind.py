import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import math
def getMeanAndCI(ontimes,i):
    n, min_max, mean, var, skew, kurt = stats.describe(ontimes)
    std=math.sqrt(var)
    R = stats.norm.interval(0.95,loc=mean,scale=std/math.sqrt(i)) #definition's way
    #R = stats.norm.interval(0.05,loc=mean,scale=std) #dr.Amini's dropbox file way
    diff=mean-R[0]
    print("mean="+str(mean))
    return mean,diff
    #ci=diff/int(i)*100 #dr.Amini's dropbox file way
    #return ci #dr.Amini's dropbox file way

def insMeanAndCI(mean,CI,raw,count,l):
    cin=getMeanAndCI(raw[l],count)
    mean.append(cin[0])
    CI.append(cin[1])

#function specific to each graph, if it need some normalize    
def normalizeSubstract(oldlist,baseline):
    newlist=[]
    sequence=0
    for i in range(len(baseline)):
        newlist.append([])
        for j in range(len(baseline[i])):
            newlist[i].append(baseline[i][j]-oldlist[i][j])
            #print("newSeq")
    return newlist

##########start data section
#dump raw data here, so we can calculate both average and confidence interval


#Head=[1.0, 1.4, 1.7, 1.9, 2.0, 2.1, 2.3, 2.6, 3.0, 3.5, 4.0]

#Conservative
Cons_raw=[[534,405,319,475,529,114,427,332,285,347,391,123,510,743,309,518,253,431,239,243,724,825,410,336,219,413,159,328,234,507],[610,353,407,715,791,150,861,172,365,527,624,163,472,934,424,703,514,460,341,905,937,831,619,681,444,592,332,407,738,703],[825,453,624,755,973,327,726,370,431,620,688,410,640,1075,195,770,651,748,320,945,1057,1043,718,773,530,861,839,380,975,669],[1110,511,1113,945,1095,972,1128,857,578,709,1021,845,713,1179,637,915,836,780,380,1067,1174,1122,1094,991,876,1076,1139,742,1078,781],[1197,539,1211,1235,1242,1031,1232,1088,938,968,1223,970,1059,1245,928,965,1064,844,676,1154,1253,1230,1207,1045,1167,1193,1214,985,1168,1109],[1319,822,1289,1356,1344,1281,1310,1302,1010,1115,1318,1282,1281,1353,1046,1088,1263,1201,1288,1218,1360,1330,1305,1084,1333,1289,1344,1313,1300,1086],[1404,1161,1448,1465,1461,1375,1419,1374,1411,1308,1443,1385,1200,1504,1256,1124,1340,1386,1220,1396,1501,1434,1430,1274,1429,1463,1423,1449,1398,1420],[1529,1530,1552,1574,1597,1505,1559,1500,1524,1266,1561,1513,1326,1600,1275,1391,1563,1505,1419,1501,1611,1540,1554,1488,1528,1561,1590,1536,1540,1532],[1639,1673,1629,1672,1715,1641,1701,1640,1667,1440,1664,1591,1642,1683,1543,1611,1682,1636,1569,1584,1695,1657,1661,1533,1661,1679,1696,1646,1663,1672],[1751,1797,1741,1748,1789,1730,1795,1734,1816,1601,1781,1768,1743,1801,1771,1743,1778,1756,1746,1767,1814,1761,1771,1618,1718,1758,1772,1813,1731,1758],[1795,1880,1827,1899,1884,1829,1882,1776,1891,1758,1873,1846,1875,1872,1869,1840,1888,1838,1844,1771,1883,1826,1883,1708,1841,1878,1876,1933,1855,1851]]

#Aggressive
Agg_raw=[[494,385,269,588,647,67,561,223,410,327,522,155,478,740,143,667,235,356,304,178,888,744,264,327,305,415,100,286,450,510],[692,380,427,728,639,152,410,407,406,477,362,205,399,733,264,742,517,645,419,898,988,855,374,749,460,488,287,409,785,540],[934,482,705,799,939,661,488,390,460,698,782,565,643,1026,297,829,634,721,425,978,916,1023,678,810,380,818,1017,523,983,681],[1111,703,1096,1084,1029,962,1117,912,785,735,1004,431,762,1178,551,918,940,821,480,1022,1159,1128,1150,861,912,1100,1136,605,1001,883],[1185,585,1227,1256,1245,1128,1230,1201,1111,863,1172,856,1172,1248,936,957,1237,832,652,1152,1237,1170,1192,965,1022,1151,1187,1121,1243,1014],[1312,742,1290,1335,1340,1297,1242,1134,1311,1073,1316,1269,1115,1341,1135,1048,1215,1063,1258,1319,1358,1318,1325,1119,1263,1342,1296,1341,1291,1210],[1403,1033,1438,1419,1465,1321,1433,1364,1426,1140,1433,1358,1377,1481,1182,1117,1316,1322,1262,1380,1472,1434,1438,1161,1418,1423,1409,1444,1393,1400],[1502,1458,1533,1538,1559,1523,1531,1469,1506,1320,1524,1486,1392,1553,1260,1259,1493,1485,1336,1481,1589,1529,1570,1300,1513,1536,1546,1562,1520,1473],[1611,1673,1611,1625,1686,1625,1674,1655,1628,1431,1644,1573,1533,1655,1549,1588,1670,1633,1559,1580,1659,1652,1655,1477,1635,1636,1638,1648,1612,1651],[1696,1788,1692,1707,1729,1718,1752,1770,1777,1585,1765,1710,1738,1741,1733,1731,1749,1714,1723,1668,1746,1747,1751,1629,1755,1734,1731,1771,1721,1745],[1773,1864,1798,1841,1827,1796,1844,1841,1860,1647,1844,1774,1829,1819,1790,1793,1856,1814,1762,1706,1832,1808,1867,1682,1752,1829,1827,1889,1791,1834]]

#Adaptive
Adapt_raw=[[443,316,354,573,419,116,417,322,275,369,599,381,410,812,119,638,235,495,250,606,694,762,380,513,211,342,124,324,477,526],[744,439,670,653,592,157,807,442,335,566,456,135,422,875,189,780,502,540,316,958,902,915,583,739,406,419,280,442,439,634],[805,493,846,895,1056,300,525,237,479,706,689,536,809,954,299,857,675,648,402,940,876,1042,904,790,573,825,1034,356,850,716],[1106,542,1119,967,1016,420,1030,681,868,754,986,846,951,1169,670,915,789,762,580,1022,1171,1121,1141,924,1024,1020,1138,696,943,835],[1191,740,1197,1253,1241,1148,1220,1176,1089,908,1211,1012,754,1225,900,965,1091,814,699,1185,1253,1228,1215,1063,1065,1146,1214,1088,1224,992],[1307,755,1290,1351,1355,1297,1321,1228,1105,963,1308,1262,974,1360,1047,1051,1132,1154,1270,1294,1370,1332,1328,1199,1237,1325,1310,1211,1282,1163],[1399,1135,1404,1466,1480,1388,1429,1364,1448,1167,1444,1334,1369,1497,1133,1195,1291,1422,1056,1388,1486,1436,1437,1240,1413,1453,1438,1462,1382,1436],[1543,1495,1531,1588,1580,1530,1536,1504,1565,1285,1537,1484,1524,1604,1375,1389,1558,1500,1478,1508,1615,1539,1565,1358,1512,1574,1610,1568,1542,1515],[1630,1690,1621,1679,1712,1652,1692,1608,1672,1411,1656,1609,1641,1685,1547,1622,1653,1654,1605,1573,1688,1668,1678,1451,1669,1681,1698,1673,1646,1678],[1735,1818,1727,1769,1793,1729,1798,1714,1807,1610,1796,1766,1714,1763,1763,1748,1776,1737,1723,1683,1815,1756,1790,1606,1776,1760,1758,1794,1744,1742],[1818,1891,1853,1907,1898,1815,1872,1841,1885,1692,1880,1793,1896,1886,1849,1850,1882,1818,1795,1709,1880,1839,1884,1704,1800,1175,1866,1927,1848,1858]]

#Nomerge
Nomerge_raw=[[639,411,290,574,557,178,517,206,286,263,537,390,543,771,163,668,213,447,224,297,911,824,430,521,426,476,144,288,356,510],[757,438,461,751,959,294,907,225,352,585,351,150,577,820,506,850,538,502,475,636,1037,983,360,802,599,555,199,487,687,729],[1000,564,895,883,1095,920,808,503,435,784,797,594,941,1141,471,895,650,756,520,653,1126,1089,796,923,561,948,975,460,1040,697],[1161,912,1180,1075,1222,1136,1186,821,999,859,1199,579,1094,1237,1106,997,1122,1119,691,1078,1217,1235,1176,1036,759,1206,1136,1097,1150,892],[1269,795,1286,1336,1317,1214,1298,1276,1072,1212,1307,1116,878,1326,1229,1031,1242,910,729,1251,1330,1329,1303,1098,958,1297,1248,1252,1323,1165],[1380,1082,1387,1423,1428,1397,1390,1339,1259,1062,1410,1366,1337,1435,1276,1226,1288,1052,1280,1372,1443,1430,1417,1191,1337,1444,1397,1433,1398,1245],[1510,1310,1519,1531,1550,1461,1520,1494,1498,1300,1532,1432,1351,1568,1269,1194,1419,1468,1471,1465,1548,1535,1516,1354,1511,1544,1485,1525,1492,1441],[1621,1623,1624,1630,1664,1609,1629,1568,1607,1473,1634,1516,1548,1658,1398,1350,1651,1587,1392,1628,1675,1634,1658,1508,1608,1642,1646,1652,1630,1544],[1720,1778,1720,1733,1778,1730,1764,1710,1724,1637,1746,1690,1667,1753,1720,1698,1736,1714,1728,1637,1767,1767,1735,1664,1675,1763,1752,1725,1750,1691],[1825,1892,1811,1833,1869,1780,1854,1867,1892,1659,1860,1831,1848,1851,1836,1832,1867,1820,1856,1770,1878,1868,1861,1718,1796,1853,1823,1865,1830,1825],[1908,1989,1907,1980,1975,1916,1958,1958,1962,1755,1954,1894,1983,1959,1933,1930,1950,1918,1933,1861,1977,1939,1972,1819,1921,1966,1939,1990,1935,1922]]









#create array for mean, and confidence interval
Cons=[]
Agg=[]
Adapt=[]
#
Cons_ci=[]
Agg_ci=[]
Adapt_ci=[]
#calculate CI and mean
column=len(Cons_raw)

######## normalize the data
Cons_raw=normalizeSubstract(Cons_raw,Nomerge_raw)
Agg_raw=normalizeSubstract(Agg_raw,Nomerge_raw)
Adapt_raw=normalizeSubstract(Adapt_raw,Nomerge_raw)

#find mean and stdErr
for l in range(column):
    #format: mean array, CI array, raw data, how many trials in the raw data
    #don't forget to change number 30 to number of trials you actually test
    insMeanAndCI(Cons,Cons_ci,Cons_raw,30,l)
    insMeanAndCI(Agg,Agg_ci,Agg_raw,30,l)
    insMeanAndCI(Adapt,Adapt_ci,Adapt_raw,30,l)
    #insMeanAndCI(Nomerge,Nomerge_ci,Nomerge_raw,30,l)
###########################################
# initiation
fig, ax = plt.subplots()
axes = plt.gca()
############
#your main input parameters section
n_groups =3 # number of different data to plot, can change here without removing data
xlabel='Oversubscription Level (#Tasks)'
ylabel='DMR'
n_point = column # number of x ticks to use, must match number of xtick and number of data point
xtick=('1k','1.1k','1.2k','1.3k','1.4k','1.5k','1.6k','1.7k','1.8k','1.9k','2k')
labels=['Conservative',"Adaptive",'Aggressive']
legendcolumn= 2 #number of column in the legend
data=[Cons,Adapt,Agg]
yerrdata=[Cons_ci,Adapt_ci,Agg_ci]
axes.set_ylim([0,600]) #y axis scale
ticklabelsize=18
axislabelfontsize=16

############
#auto calculated values and some rarely change config, can also overwrite
axes.set_xlim([-0.5, len(xtick)-0.5]) #y axis
font = {'family' : 'DejaVu Sans',
        #'weight' : 'bold',
        'size'   : 16 }
bar_width =1.0/(n_groups+2) 
edgecols=['royalblue','forestgreen','red','mediumblue','orange','pink','limegreen','lightblue','darkgreen'] #prepared 9 colors
#hatch_arr=[".","x"]
hatch_arr=["////","ooo",".\\\\\\","----","**","xxx","+++",".///","////////"] #prepared 9 hatch style
opacity = 1 #chart opacity
offsetindex=(n_groups-1)/2.0


############
#plot section
plt.rc('font', **font)
index = np.arange(n_point)
print("data"+str(data))
print("yerrdata"+str(yerrdata))
for i in range(0,n_groups):
    #draw internal hatch, and labels
    plt.bar(index - (offsetindex-i)*bar_width, data[i], bar_width,
                     alpha=opacity,                 
                     hatch=hatch_arr[i],
                    #color=edgecols[i],
                	 color='white',
		     edgecolor=edgecols[i],
             label=labels[i],
		     lw=1.0,
		     zorder = 0)
    #draw black liner and error bar
    plt.bar(index - (offsetindex-i)*bar_width, data[i], bar_width, yerr =
		    yerrdata[i],                              
                    color='none',
		    error_kw=dict(ecolor='black',capsize=3),
                    edgecolor='k',
		    zorder = 1,
		    lw=1.0)

plt.tick_params(axis='both', which='major', labelsize=ticklabelsize)
plt.tick_params(axis='both', which='minor', labelsize=ticklabelsize)
plt.xlabel(xlabel,fontsize=axislabelfontsize)
plt.ylabel(ylabel,fontsize=axislabelfontsize)
#plt.title('Execution time (deadline sorted batch queue)') #generally, we add title in latex
ax.set_xticks(index)
ax.set_xticklabels(xtick)
ax.legend(loc='upper center', prop={'size': 10},bbox_to_anchor=(0.5, 1.00), shadow= True, ncol=legendcolumn)

plt.tight_layout()
plt.show()


